// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Attestation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Attestation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Attestation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Attestation", id.toString(), this);
  }

  static load(id: string): Attestation | null {
    return store.get("Attestation", id) as Attestation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestCount(): BigInt {
    let value = this.get("requestCount");
    return value.toBigInt();
  }

  set requestCount(value: BigInt) {
    this.set("requestCount", Value.fromBigInt(value));
  }

  get identifier(): Bytes {
    let value = this.get("identifier");
    return value.toBytes();
  }

  set identifier(value: Bytes) {
    this.set("identifier", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get completeCount(): BigInt {
    let value = this.get("completeCount");
    return value.toBigInt();
  }

  set completeCount(value: BigInt) {
    this.set("completeCount", Value.fromBigInt(value));
  }
}
